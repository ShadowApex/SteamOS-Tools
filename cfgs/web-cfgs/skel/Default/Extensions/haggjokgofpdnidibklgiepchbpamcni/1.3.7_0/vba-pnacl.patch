diff --git a/CMakeLists.txt b/CMakeLists.txt
index d5bf7c2..a785d4c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,6 +10,7 @@ SET( CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeScripts )
 
 option( ENABLE_SDL "Build the SDL port" ON )
 option( ENABLE_GTK "Build the GTK+ GUI" ON )
+option( ENABLE_PNACL "Build the PNaCl port" ON )
 option( ENABLE_WX "Build the wxWidgets port" OFF )
 option( ENABLE_DEBUGGER "Enable the debugger" ON )
 option( ENABLE_NLS "Enable translations" ON )
@@ -34,6 +35,11 @@ if( NOT ENABLE_DEBUGGER AND ENABLE_SDL )
         message( SEND_ERROR "The SDL port can't be built without debugging support" )
 endif( NOT ENABLE_DEBUGGER AND ENABLE_SDL )
 
+if ( PNACL )
+  set ( ENABLE_SDL ON )
+  set ( ENABLE_GTK OFF )
+endif ( PNACL )
+
 # Set the version number with -DVERSION=X.X.X-uber
 IF( NOT VERSION )
     SET( VERSION "1.8.0-SVN" )
@@ -61,7 +67,7 @@ endif( ENABLE_ASM_SCALERS )
 # Look for some dependencies using CMake scripts
 FIND_PACKAGE ( ZLIB REQUIRED )
 FIND_PACKAGE ( PNG REQUIRED )
-FIND_PACKAGE ( OpenGL REQUIRED )
+FIND_PACKAGE ( OpenGL )
 FIND_PACKAGE ( SDL REQUIRED )
 
 if( ENABLE_LINK )
@@ -75,9 +81,13 @@ SET(VBAMCORE_LIBS
     ${SFML_LIBRARY}
     ${OPENGL_LIBRARIES}
     ${ZLIB_LIBRARY}
-    ${PNG_LIBRARY})
-
+    ${PNG_LIBRARY}
+)
 
+if ( PNACL )
+   # Add core NaCl libraries.
+   SET(VBAMCORE_LIBS ${VBAMCORE_LIBS} ppapi ppapi_cpp nacl_io)
+endif ( PNACL )
 
 # Disable looking for GTK if not going to build the GTK frontend
 # so that pkg-config is not required
@@ -121,8 +131,12 @@ IF( NOT SYSCONFDIR )
     SET( SYSCONFDIR "/etc" )
 ENDIF( NOT SYSCONFDIR )
 
+if ( OpenGL_FOUND )
+  set( USE_OPENGL_FLAG "-DUSE_OPENGL " )
+endif ( OpenGL_FOUND )
+
 # C defines
-ADD_DEFINITIONS (-DHAVE_NETINET_IN_H -DHAVE_ARPA_INET_H -DHAVE_ZLIB_H -DFINAL_VERSION -DSDL -DUSE_OPENGL -DSYSCONFDIR='"${SYSCONFDIR}"' -DWITH_LIRC='${WITHLIRC}')
+ADD_DEFINITIONS (-DHAVE_NETINET_IN_H -DHAVE_ARPA_INET_H -DHAVE_ZLIB_H -DFINAL_VERSION -DSDL ${USE_OPENGL_FLAG} -DSYSCONFDIR='"${SYSCONFDIR}"' -DWITH_LIRC='${WITHLIRC}')
 ADD_DEFINITIONS (-DVERSION='"${VERSION}"' -DPKGDATADIR='"${PKGDATADIR}"' -DPACKAGE='')
 
 if( ENABLE_LINK )
@@ -294,6 +308,10 @@ SET(SRC_SDL
     src/sdl/expr-lex.cpp
 )
 
+SET(SRC_PNACL
+    src/pnacl/nacl_glue.cpp
+)
+
 SET(SRC_FILTERS
     src/filters/2xSaI.cpp
     src/filters/admame.cpp
@@ -408,8 +426,8 @@ IF( ENABLE_SDL )
         vbam
         WIN32
         ${SRC_SDL}
+        ${SRC_PNACL}
     )
-
     IF( WIN32 )
         SET( WIN32_LIBRARIES wsock32 )
     ENDIF( WIN32 )
@@ -425,11 +443,16 @@ IF( ENABLE_SDL )
         ${LIRC_CLIENT_LIBRARY}
     )
 
-    INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/vbam DESTINATION bin)
-    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/sdl/vbam.cfg-example
-            DESTINATION ${SYSCONFDIR}
-            RENAME vbam.cfg)
-    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/vba-over.ini DESTINATION ${DATA_INSTALL_DIR})
+    IF ( PNACL )
+        build_to_app( vbam )
+    ELSE ( PNACL )
+        INSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/vbam DESTINATION bin)
+        INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/sdl/vbam.cfg-example
+                DESTINATION ${SYSCONFDIR}
+                RENAME vbam.cfg)
+        INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/vba-over.ini DESTINATION
+                ${DATA_INSTALL_DIR})
+    ENDIF ( PNACL )
 ENDIF( ENABLE_SDL )
 
 IF( ENABLE_GTK )
diff --git a/CMakeScripts/PNaCl.Toolchain.cmake b/CMakeScripts/PNaCl.Toolchain.cmake
new file mode 100644
index 0000000..8fef3f1
--- /dev/null
+++ b/CMakeScripts/PNaCl.Toolchain.cmake
@@ -0,0 +1,55 @@
+# How to build for PNaCl.
+#
+# Download the Native Client SDK.
+# Run naclsdk update pepper_XX.
+# Set NACL_SDK_ROOT in your environment to nacl_sdk/pepper_XX.
+#
+# Check out the naclports repository.
+# Set NACL_ARCH to 'pnacl' in your environment and run make sdl
+# from the naclports root.
+#
+# Come back to the root of vba-m and run
+# cmake -DCMAKE_TOOLCHAIN_FILE=CMakeScripts/PNaCl.Toolchain.cmake CMakeLists.txt
+#
+# This will build a non-finalized PNaCl port to ./vbam and a finalized version to
+# src/pnacl/app/vbam.pexe.
+#
+# The src/pnacl/app folder can be loaded as an unpacked extension into Chrome
+# which will run vba-m as a packaged app.
+
+include( CMakeForceCompiler )
+
+set( PNACL                   ON )
+set( PLATFORM_TRIPLET        "pnacl" )
+set( PLATFORM_PREFIX         "$ENV{NACL_SDK_ROOT}/toolchain/linux_pnacl" )
+
+set( CMAKE_SYSTEM_NAME       "Linux" CACHE STRING "Target system." )
+set( CMAKE_SYSTEM_PROCESSOR  "LLVM-IR" CACHE STRING "Target processor." )
+set( CMAKE_FIND_ROOT_PATH    "${PLATFORM_PORTS_PREFIX};${PLATFORM_PREFIX}/usr" )
+set( CMAKE_AR                "${PLATFORM_PREFIX}/bin64/${PLATFORM_TRIPLET}-ar" CACHE STRING "")
+set( CMAKE_RANLIB            "${PLATFORM_PREFIX}/bin64/${PLATFORM_TRIPLET}-ranlib" CACHE STRING "")
+set( CMAKE_C_COMPILER        "${PLATFORM_PREFIX}/bin64/${PLATFORM_TRIPLET}-clang" )
+set( CMAKE_CXX_COMPILER      "${PLATFORM_PREFIX}/bin64/${PLATFORM_TRIPLET}-clang++" )
+set( CMAKE_C_FLAGS           "-Wno-non-literal-null-conversion -Wno-deprecated-writable-strings -U__STRICT_ANSI__" CACHE STRING "" )
+set( CMAKE_CXX_FLAGS         "-Wno-non-literal-null-conversion -Wno-deprecated-writable-strings -U__STRICT_ANSI__" CACHE STRING "" )
+
+cmake_force_c_compiler(      ${CMAKE_C_COMPILER} Clang )
+cmake_force_cxx_compiler(    ${CMAKE_CXX_COMPILER} Clang )
+
+set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
+set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
+set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
+set( CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY )
+
+macro( build_to_app _target )
+    add_custom_command( TARGET ${_target}
+        POST_BUILD
+        COMMAND "${PLATFORM_PREFIX}/bin64/${PLATFORM_TRIPLET}-finalize"
+                "-o" "src/pnacl/app/vbam.pexe"
+                "$<TARGET_FILE:${_target}>" )
+endmacro()
+
+set( ENV{SDLDIR} "${PLATFORM_PREFIX}/usr" )
+include_directories( SYSTEM $ENV{NACL_SDK_ROOT}/include )
+include_directories( SYSTEM ${PLATFORM_PREFIX}/usr/include/glibc-compat )
+link_directories( $ENV{NACL_SDK_ROOT}/lib/pnacl/Release )
diff --git a/src/common/Patch.cpp b/src/common/Patch.cpp
index ac4893a..5696628 100644
--- a/src/common/Patch.cpp
+++ b/src/common/Patch.cpp
@@ -7,7 +7,7 @@
 
 
 #ifdef __GNUC__
-#if defined(__APPLE__) || defined (BSD) || defined (__NetBSD__)
+#if defined(__APPLE__) || defined (BSD) || defined (__NetBSD__) || defined (__native_client__)
 typedef off_t __off64_t; /* off_t is 64 bits on BSD. */
 #define	fseeko64 fseeko
 #define	ftello64 ftello
diff --git a/src/gba/GBAcpu.h b/src/gba/GBAcpu.h
index 3b22e00..6687f26 100644
--- a/src/gba/GBAcpu.h
+++ b/src/gba/GBAcpu.h
@@ -5,7 +5,7 @@ extern int armExecute();
 extern int thumbExecute();
 
 #ifdef __GNUC__
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__native_client__)
 # define INSN_REGPARM __attribute__((regparm(1)))
 #else
 # define INSN_REGPARM /*nothing*/
diff --git a/src/pnacl/app/background.js b/src/pnacl/app/background.js
new file mode 100644
index 0000000..e9d8ab4
--- /dev/null
+++ b/src/pnacl/app/background.js
@@ -0,0 +1,11 @@
+chrome.app.runtime.onLaunched.addListener(function() {
+  chrome.app.window.create('game.html', {
+    bounds: {
+      width: 480,
+      height: 320
+    },
+    resizable: true,
+    minWidth: 480,
+    minHeight: 320
+  });
+});
diff --git a/src/pnacl/app/game.gba b/src/pnacl/app/game.gba
new file mode 100755
index 0000000..eb2eaaf
Binary files /dev/null and b/src/pnacl/app/game.gba differ
diff --git a/src/pnacl/app/game.html b/src/pnacl/app/game.html
new file mode 100644
index 0000000..66526d3
--- /dev/null
+++ b/src/pnacl/app/game.html
@@ -0,0 +1,26 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <link rel="stylesheet" href="style.css">
+  </head>
+  <body>
+    <div id="listener">
+      <embed name="nacl_module"
+             id="naclModule"
+             width=480 height=320
+             src="game.nmf"
+             type="application/x-pnacl" />
+    </div>
+    <div id="loadingMessage" class="centered">
+      <div>Translating PNaCl to Native Architecture</div>
+      <div id="loadingBar">
+        <div id="progress"></div>
+      </div>
+    </div>
+    <div id="openMessage" class="centered" style="display: none;">
+      Press Ctrl+O to open a file
+    </div>
+    <script src="index.js"></script>
+  </body>
+</html>
+
diff --git a/src/pnacl/app/game.nmf b/src/pnacl/app/game.nmf
new file mode 100644
index 0000000..0c53796
--- /dev/null
+++ b/src/pnacl/app/game.nmf
@@ -0,0 +1,10 @@
+{
+  "program": {
+    "portable" : {
+      "pnacl-translate" : {
+        "url" : "vbam.pexe",
+        "optlevel": 2
+      }
+    }
+  }
+}
diff --git a/src/pnacl/app/icon.png b/src/pnacl/app/icon.png
new file mode 100755
index 0000000..af50b54
Binary files /dev/null and b/src/pnacl/app/icon.png differ
diff --git a/src/pnacl/app/index.js b/src/pnacl/app/index.js
new file mode 100644
index 0000000..b032f14
--- /dev/null
+++ b/src/pnacl/app/index.js
@@ -0,0 +1,88 @@
+var plugin = document.getElementById('naclModule');
+var resizeTimer;
+var firstLoad = false;
+
+var postFileCallback = function() {};
+
+function scaleNacl() {
+  clearTimeout(resizeTimer);
+  resizeTimer = setTimeout(function() {
+    var bounds = chrome.app.window.current().getBounds();
+    var scaleX = bounds.width / plugin.width;
+    var scaleY = bounds.height / plugin.height;
+    var scale = Math.min(scaleX, scaleY);
+    plugin.style.webkitTransform = 'scale(' + scale + ')';
+  }, 100);
+}
+
+function makeNewPlugin() {
+  var newNode = plugin.cloneNode(true);
+  plugin.parentNode.appendChild(newNode);
+  plugin.parentNode.removeChild(plugin);
+  plugin = document.getElementById('naclModule');
+  document.getElementsByTagName('body')[0].className = 'lightsOn';
+}
+
+function showOpenFileDialog() {
+  chrome.fileSystem.chooseEntry({
+    'type': 'openFile'
+    },
+    function(entry) {
+      if (!entry)
+        return;
+
+      postFileCallback = function() {
+        plugin.postMessage({
+          'path': entry.fullPath,
+          'filesystem': entry.filesystem
+        });
+        document.getElementsByTagName('body')[0].className = 'lightsOff';
+        postFileCallback = function() {};
+      };
+      makeNewPlugin();
+    });
+}
+
+chrome.app.window.current().onBoundsChanged.addListener(scaleNacl);
+
+var listener = document.getElementById('listener');
+
+listener.addEventListener(
+  'message',
+  function(e) {
+    console.log(e);
+  }, true);
+
+listener.addEventListener(
+  'crash',
+  function(e) {
+    makeNewPlugin();
+  }, true);
+
+listener.addEventListener(
+  'load',
+  function(e) {
+    document.getElementById('openMessage').style.display = 'block';
+    document.getElementById('loadingMessage').style.display = 'none';
+    postFileCallback();
+    firstLoad = true;
+    scaleNacl();
+  }, true);
+
+listener.addEventListener(
+  'progress',
+  function(e) {
+    var percent = e.loaded / e.total;
+    document.getElementById('progress').style.width = (percent * 100) + '%';
+  }, true);
+
+document.addEventListener('keydown', function(e) {
+  // Ctrl + o
+  if (firstLoad && e.ctrlKey && e.keyCode == 79) {
+    showOpenFileDialog();
+  }
+  // ESC
+  if (e.keyCode == 27) {
+    e.preventDefault();
+  }
+}, true);
diff --git a/src/pnacl/app/manifest.json b/src/pnacl/app/manifest.json
new file mode 100644
index 0000000..4800e38
--- /dev/null
+++ b/src/pnacl/app/manifest.json
@@ -0,0 +1,19 @@
+{
+  "name": "VBA-M",
+  "version": "1.1",
+  "manifest_version": 2,
+  "minimum_chrome_version": "34",
+  "icons": {
+    "128": "icon.png"
+  },
+  "app": {
+    "background": {
+      "scripts": ["background.js"]
+    }
+  },
+  "permissions": [
+    "fileSystem",
+    "storage",
+    "unlimitedStorage"
+  ]
+}
diff --git a/src/pnacl/app/style.css b/src/pnacl/app/style.css
new file mode 100644
index 0000000..47f4ca4
--- /dev/null
+++ b/src/pnacl/app/style.css
@@ -0,0 +1,49 @@
+/* Structure */
+
+html {
+  height: 100%;
+}
+
+body {
+  align-items: center;
+  display: flex;
+  height: 100%;
+  justify-content: center;
+  margin: 0;
+}
+
+.lightsOn {
+  background-color: rgb(251, 251, 251);
+}
+
+.lightsOff {
+  background-color: black;
+}
+
+.centered {
+  left: 0;
+  position:absolute;
+  text-align: center;
+  top: 40%;
+  width: 100%;
+  z-index: -1;
+}
+
+#loadingBar {
+  background-color: black;
+  border-radius: 13px;
+  margin: 0 auto;
+  padding: 3px;
+  width: 200px;
+}
+
+#loadingBar > div {
+  background-color: blue;
+  border-radius: 10px;
+  height: 10px;
+  width: 0;
+}
+
+#naclModule {
+  -webkit-transform-origin: 50% 50%;
+}
diff --git a/src/pnacl/app/vbam.cfg b/src/pnacl/app/vbam.cfg
new file mode 100644
index 0000000..86fc9a4
--- /dev/null
+++ b/src/pnacl/app/vbam.cfg
@@ -0,0 +1,4 @@
+captureDir=/store/captures
+saveDir=/store/states
+batteryDir=/store
+showSpeed=2
diff --git a/src/pnacl/nacl_glue.cpp b/src/pnacl/nacl_glue.cpp
new file mode 100644
index 0000000..4f592bb
--- /dev/null
+++ b/src/pnacl/nacl_glue.cpp
@@ -0,0 +1,187 @@
+#include <SDL/SDL.h>
+#include <SDL/SDL_nacl.h>
+#include <nacl_io/nacl_io.h>
+#include <ppapi/c/pp_errors.h>
+#include <ppapi/c/pp_instance.h>
+#include <ppapi/c/ppb_instance.h>
+#include <ppapi/cpp/completion_callback.h>
+#include <ppapi/cpp/file_system.h>
+#include <ppapi/cpp/input_event.h>
+#include <ppapi/cpp/instance.h>
+#include <ppapi/cpp/module.h>
+#include <ppapi/cpp/url_loader.h>
+#include <ppapi/cpp/url_request_info.h>
+#include <ppapi/cpp/url_response_info.h>
+#include <ppapi/cpp/var.h>
+#include <ppapi/utility/completion_callback_factory.h>
+#include <sys/mount.h>
+#include <sys/stat.h>
+
+extern int SDL_main(int argc, char **argv);
+
+class GameInstance : public pp::Instance {
+ public:
+  explicit GameInstance(PP_Instance instance)
+    : pp::Instance(instance),
+      game_main_thread_(NULL),
+      num_changed_view_(0),
+      width_(0),
+      height_(0),
+      cc_factory_(this) {
+    // Game requires mouse and keyboard events; add more if necessary.
+    nacl_io_init_ppapi(instance, pp::Module::Get()->get_browser_interface());
+    RequestInputEvents(PP_INPUTEVENT_CLASS_MOUSE |
+                       PP_INPUTEVENT_CLASS_KEYBOARD);
+    ++num_instances_;
+    assert(num_instances_ == 1);
+  }
+
+  virtual ~GameInstance() {
+    // Wait for game thread to finish.
+    if (game_main_thread_) {
+      pthread_join(game_main_thread_, NULL);
+    }
+  }
+
+  // This function is called with the HTML attributes of the embed tag,
+  // which can be used in lieu of command line arguments.
+  virtual bool Init(uint32_t argc, const char* argn[], const char* argv[]) {
+    for (uint32_t i = 0; i < argc; ++i) {
+      if (argn[i] == std::string("width")) {
+        width_ = strtol(argv[i], 0, 0);
+      }
+
+      if (argn[i] == std::string("height")) {
+        height_ = strtol(argv[i], 0, 0);
+      }
+    }
+    return true;
+  }
+
+  // This crucial function forwards PPAPI events to SDL.
+  virtual bool HandleInputEvent(const pp::InputEvent& event) {
+    SDL_NACL_PushEvent(event.pp_resource());
+    return true;
+  }
+
+  virtual void HandleMessage(const pp::Var& message) {
+    if (message.is_string())
+      fprintf(stderr, "%s\n", message.AsString().c_str());
+    if (message.is_int())
+      fprintf(stderr, "%d\n", message.AsInt());
+    if (!message.is_dictionary())
+      return;
+
+    pp::VarDictionary args(message);
+    pp::Var filesystem_var = args.Get("filesystem");
+    if (!filesystem_var.is_resource())
+      return;
+
+    pp::Resource filesystem_resource = filesystem_var.AsResource();
+    if (!pp::FileSystem::IsFileSystem(filesystem_resource))
+      return;
+
+    PP_Resource filesystem_id = filesystem_resource.pp_resource();
+    if (!filesystem_id)
+      return;
+
+    char buf[BUFSIZ];
+    if (snprintf(buf, BUFSIZ, "type=MANUAL,resource_id=%d", filesystem_id) > BUFSIZ)
+      return;
+
+    rom_mount_string_ = buf;
+
+    pp::Var path_var = args.Get("path");
+    if (!path_var.is_string())
+      return;
+
+    rom_path_string_ = path_var.AsString();
+  }
+
+  // This function is called for various reasons, e.g. visibility and page
+  // size changes. We ignore these calls except for the first
+  // invocation, which we use to start the game.
+  virtual void DidChangeView(const pp::Rect& position, const pp::Rect& clip) {
+    ++num_changed_view_;
+    if (num_changed_view_ > 1) return;
+    // NOTE: It is crucial that the two calls below are run here
+    // and not in a thread.
+    SDL_NACL_SetInstance(pp_instance(),
+                         pp::Module::Get()->get_browser_interface(),
+                         width_,
+                         height_);
+    // This is SDL_Init call which used to be in game_main()
+    int flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER |
+        SDL_INIT_NOPARACHUTE;
+    if(SDL_Init(flags))
+      exit(-1);
+
+    StartGameInNewThread(0);
+  }
+ private:
+  static int num_instances_;       // Ensure we only create one instance.
+  pthread_t game_main_thread_;     // This thread will run game_main().
+  int num_changed_view_;           // Ensure we initialize an instance only once.
+  // Dimension of the SDL video screen.
+  int width_;
+  int height_;
+  pp::CompletionCallbackFactory<GameInstance> cc_factory_;
+
+  std::string rom_mount_string_;
+  std::string rom_path_string_;
+
+  void StartGameInNewThread(int32_t dummy) {
+    if (!rom_mount_string_.empty() && !rom_path_string_.empty()) {
+      fprintf(stderr, "Mounting %s with %s\n", rom_path_string_.c_str(),
+              rom_mount_string_.c_str());
+      pthread_create(&game_main_thread_, NULL, &LaunchGame, this);
+    } else {
+      // Wait some more (here: 100ms).
+      pp::Module::Get()->core()->CallOnMainThread(
+        100, cc_factory_.NewCallback(&GameInstance::StartGameInNewThread), 0);
+    }
+  }
+
+  static void* LaunchGame(void* data) {
+    // Use "thiz" to get access to instance object.
+    GameInstance* thiz = reinterpret_cast<GameInstance*>(data);
+    umount("/");
+    mount("", "/", "memfs", 0, "");
+
+    mkdir("/config", 0777);
+    fprintf(stderr, "mount httpfs = %d\n", mount("/", "/config", "httpfs", 0, ""));
+
+    mkdir("/games", 0777);
+    fprintf(stderr, "mount rom = %d\n", mount("/", "/games", "html5fs", 0, thiz->rom_mount_string_.c_str()));
+
+    mkdir("/store", 0777);
+    fprintf(stderr, "mount html5fs = %d\n", mount("/", "/store", "html5fs", 0, ""));
+    mkdir("/store/states", 0777);
+    mkdir("/store/captures", 0777);
+    // Craft a fake command line.
+    char rom_path[BUFSIZ];
+    strncpy(rom_path, ("/games" + thiz->rom_path_string_).c_str(), BUFSIZ);
+    char* argv[] = { "vbam", "--config=/config/vbam.cfg", rom_path, NULL};
+    SDL_main(3, argv);
+    return 0;
+  }
+};
+
+int GameInstance::num_instances_;
+
+class GameModule : public pp::Module {
+ public:
+  GameModule() : pp::Module() {}
+  virtual ~GameModule() {}
+
+  virtual pp::Instance* CreateInstance(PP_Instance instance) {
+    return new GameInstance(instance);
+  }
+};
+
+namespace pp {
+Module* CreateModule() {
+  return new GameModule();
+}
+
+}  // namespace pp
diff --git a/src/sdl/SDL.cpp b/src/sdl/SDL.cpp
index 932cc68..9371a53 100644
--- a/src/sdl/SDL.cpp
+++ b/src/sdl/SDL.cpp
@@ -23,6 +23,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <cmath>
+#ifdef USE_OPENGL
 #ifdef __APPLE__
     #include <OpenGL/glu.h>
     #include <OpenGL/glext.h>
@@ -30,6 +31,7 @@
     #include <GL/glu.h>
     #include <GL/glext.h>
 #endif
+#endif
 
 #include <time.h>
 
@@ -133,9 +135,13 @@ int sdlPrintUsage = 0;
 int cartridgeType = 3;
 int captureFormat = 0;
 
-int openGL = 1;
 int textureSize = 256;
+#ifdef USE_OPENGL
+int openGL = 1;
 GLuint screenTexture = 0;
+#else
+int openGL = 0;
+#endif
 u8 *filterPix = 0;
 
 int pauseWhenInactive = 0;
@@ -809,6 +815,7 @@ void sdlReadPreferences(FILE *f)
 
 void sdlOpenGLInit(int w, int h)
 {
+#ifdef USE_OPENGL
   float screenAspect = (float) srcWidth / srcHeight,
         windowAspect = (float) w / h;
 
@@ -860,6 +867,7 @@ void sdlOpenGLInit(int w, int h)
 
   glClearColor(0.0,0.0,0.0,1.0);
   glClear( GL_COLOR_BUFFER_BIT );
+#endif
 }
 
 void sdlReadPreferences()
@@ -1276,6 +1284,9 @@ static void sdlHandleSavestateKey(int num, int shifted)
 	// 0: load
 	// 1: save
 	int backuping	= 1; // controls whether we are doing savestate backups
+#ifdef __native_client__
+        backuping = 0;
+#endif
 
 	if ( sdlSaveKeysSwitch == 2 )
 	{
@@ -1545,11 +1556,16 @@ void sdlPollEvents()
 		      filterFunction = 0;
 		      while (!filterFunction)
 		      {
-			      filter = (Filter)((filter + 1) % kInvalidFilter);
-		        filterFunction = initFilter(filter, systemColorDepth, srcWidth);
+		        filter = (Filter)((filter + 1) % kInvalidFilter);
+#ifdef __native_client__
+                        if (getFilterEnlargeFactor(filter) != filter_enlarge)
+                          continue;
+#endif
+                        filterFunction = initFilter(filter, systemColorDepth, srcWidth);
 		      }
-		      if (getFilterEnlargeFactor(filter) != filter_enlarge)
+		      if (getFilterEnlargeFactor(filter) != filter_enlarge) {
 		        sdlInitVideo();
+		      }
 		      systemScreenMessage(getFilterName(filter));
         }
         break;
@@ -2485,6 +2501,7 @@ void systemDrawScreen()
     drawSpeed(screen, destPitch, 10, 20);
 
   if (openGL) {
+#ifdef USE_OPENGL
     glClear( GL_COLOR_BUFFER_BIT );
     glPixelStorei(GL_UNPACK_ROW_LENGTH, destWidth);
     if (systemColorDepth == 16)
@@ -2507,6 +2524,7 @@ void systemDrawScreen()
     glEnd();
 
     SDL_GL_SwapBuffers();
+#endif
   } else {
     SDL_UnlockSurface(surface);
     SDL_Flip(surface);
