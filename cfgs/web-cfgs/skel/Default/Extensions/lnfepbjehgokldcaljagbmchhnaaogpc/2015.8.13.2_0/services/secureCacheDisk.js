/*! CKP - KeePass integration for Chromeâ„¢, Copyright 2015 Steven Campbell
*/
"use strict";function SecureCacheDisk(protectedMemory,secureCacheMemory,settings){function set(key,data){key="secureCache."+key;var preppedData=protectedMemory.serialize(data);return new Promise(function(resolve,reject){tokenPromise.then(function(aesKey){var encoder=new TextEncoder;return window.crypto.subtle.encrypt(AES,aesKey,encoder.encode(preppedData))}).then(function(encData){preppedData=protectedMemory.serialize(encData);var obj={};obj[key]=preppedData,chrome.storage.local.set(obj,function(){resolve()})})["catch"](function(){secureCacheMemory.save(key,data).then(function(){resolve()})["catch"](function(err){reject(err)})})})}function get(key){return key="secureCache."+key,new Promise(function(resolve,reject){chrome.storage.local.get(key,function(encSerializedData){var encData=protectedMemory.hydrate(encSerializedData[key]);tokenPromise.then(function(aesKey){return window.crypto.subtle.decrypt(AES,aesKey,encData).then(function(decryptedBytes){var decoder=new TextDecoder,serialized=decoder.decode(new Uint8Array(decryptedBytes)),data=protectedMemory.hydrate(serialized);resolve(data)})})["catch"](function(){secureCacheMemory.get(key).then(function(data){resolve(data)})["catch"](function(err){reject(err)})})})})}function clear(key){chrome.storage.local.remove("secureCache."+key),secureCacheMemory.clear()}var exports={save:set,get:get,clear:clear},AES={name:"AES-CBC",iv:new Uint8Array([24,55,201,76,31,66,97,115,146,90,29,195,68,10,36,64])},salt=new Uint8Array([201,4,245,107,206,96,102,36,229,170,163,96,221,142,221,232]),tokenPromise=new Promise(function(resolve,reject){settings.getDiskCacheFlag().then(function(enabled){return enabled?void chrome.identity.getAuthToken({interactive:!1},function(token){if(token){var encoder=new TextEncoder,tokenBytes=encoder.encode(token);window.crypto.subtle.importKey("raw",tokenBytes,{name:"PBKDF2"},!1,["deriveKey"]).then(function(key){var wantedKeyType={name:"PBKDF2",salt:salt,iterations:1e5,hash:{name:"SHA-256"}},wantedEncryptType={name:"AES-CBC",length:256};return window.crypto.subtle.deriveKey(wantedKeyType,key,wantedEncryptType,!1,["encrypt","decrypt"])})["catch"](function(){return window.crypto.subtle.digest({name:"SHA-256"},tokenBytes).then(function(hash){return window.crypto.subtle.importKey("raw",hash,AES,!1,["encrypt","decrypt"])})}).then(function(aesKey){resolve(aesKey)})}else reject(new Error("Failed to get a 3rd party secret, cache not possible."))}):void reject(new Error("Disk cache is not enabled"))})});return exports.ready=function(){return tokenPromise.then(function(){return!0})["catch"](function(){return secureCacheMemory.ready().then(function(val){return val})["catch"](function(){return!1})})},exports}